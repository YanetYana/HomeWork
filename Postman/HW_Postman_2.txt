
HW_2 Postman


http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.
	pm.test("first", function () {
    	pm.expect(pm.response.text()).to.include("This is the first responce from server!");
	});



http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
	pm.test("Status code is 200", function () {
    	pm.response.to.have.status(200);
	});

3. Спарсить response body в json.
	let jsonData = pm.response.json();

4. Проверить, что name в ответе равно name s request (name вбить руками.)
	let user_name = jsonData.name;
	pm.test("Your test name", function () {
    	pm.expect(user_name).to.eql('Yana');
	});

5. Проверить, что age в ответе равно age s request (age вбить руками.)
	let age = jsonData.age;
	pm.test("Your test age", function () {
   	 pm.expect(age).to.eql('41');
	});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
	let salary = +jsonData.salary;
	pm.test("Your test salary", function () {
    	pm.expect(salary).to.eql(1000);
	});

7. Спарсить request.
	var formdata = pm.request.body.formdata;
	
8. Проверить, что name в ответе равно name s request (name забрать из request.)
	var nameFromRequest = formdata.find(x => x.key == 'name').value;
	pm.test("name from response should be equal to name from request", function () {
    	pm.expect(user_name).to.eql(nameFromRequest);
	});

9. Проверить, что age в ответе равно age s request (age забрать из request.)
	var ageFromRequest = formdata.find(x => x.key == 'age').value;
	pm.test("age from response should be equal to name from request", function () {
    	pm.expect(age).to.eql(ageFromRequest);
	});
	
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
	var salaryFromRequest = +formdata.find(x => x.key == 'salary').value;
	pm.test("salary from response should be equal to name from request", function () {
    	pm.expect(salary).to.eql(salaryFromRequest);
	});

11. Вывести в консоль параметр family из response.
	let family = jsonData.family;
	console.log(family);
	let children = family.children;
	for (var i = 0;i < children.length; i++) {
  	console.log(children[i][0]+'-'+children[i][1]);
	}
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
	let salary_1_5_year = family.u_salary_1_5_year;
	pm.test("test salary 1_5_year", function () {
    	pm.expect(salary_1_5_year).to.eql(salaryFromRequest*4);
	});



http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
	let jsonParams  = pm.response.json();

4. Спарсить request.
	var queryParams = pm.request.url.query;

5. Проверить, что name в ответе равно name s request (name забрать из request.)
	console.log(queryParams);
	var nameFromRequest = queryParams.find(x => x.key == 'name').value;
	let user_name = jsonParams.name;
	pm.test("name from response should be equal to name from request", function () {
    	pm.expect(user_name).to.eql(nameFromRequest);
	});
	
6. Проверить, что age в ответе равно age s request (age забрать из request.)
	var ageFromRequest = queryParams.find(x => x.key == 'age').value;
	let age = jsonParams.age;
	pm.test("age from response should be equal to name from request", function () {
    	pm.expect(age).to.eql(ageFromRequest);
	});
	
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
	var salaryFromRequest = +queryParams.find(x => x.key == 'salary').value;
	let salary = jsonParams.salary;
	pm.test("salary from response should be equal to name from request", function () {
   	 pm.expect(salary).to.eql(salaryFromRequest);
	});
8. Вывести в консоль параметр family из response.
	let family = jsonParams.family;
	console.log(family);
9. Проверить, что у параметра dog есть параметры name.
	let dog = family.pets.dog;
	pm.test("test dog has name property", function () {
    	pm.expect(dog.name).to.exist;
	});

10. Проверить, что у параметра dog есть параметры age.
	pm.test("test dog has age property", function () {
    	pm.expect(dog.age).to.exist;
	});

11. Проверить, что параметр name имеет значение Luky.
	pm.test("dog has name Luky", function () {
    	pm.expect(dog.name).to.eql('Luky');
	});

12. Проверить, что параметр age имеет значение 4.
	pm.test("dog has age", function () {
    	pm.expect(dog.age).to.eql(4);
	});

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
	let jsonParams  = pm.response.json();

4. Спарсить request.
	var queryParams = pm.request.url.query;

5. Проверить, что name в ответе равно name s request (name забрать из request.)
	console.log(queryParams);
	var nameFromRequest = queryParams.find(x => x.key == 'name').value;
	let user_name = jsonParams.name;
	pm.test("name from response should be equal to name from request", function () {
    	pm.expect(user_name).to.eql(nameFromRequest);
	});
	
6. Проверить, что age в ответе равно age из request (age забрать из request.)
	var ageFromRequest = queryParams.find(x => x.key == 'age').value;
	let age = jsonParams.age.toString();
	console.log(age);
	pm.test("age from response should be equal to name from request", function () {
    	pm.expect(age).to.eql(ageFromRequest);
	});

7. Вывести в консоль параметр salary из request.
	let salary = jsonParams.salary;
	console.log(salary);

8. Вывести в консоль параметр salary из response.
	console.log(salaryFromRequest);
	
9. Вывести в консоль 0-й элемент параметра salary из response.
	console.log(salary[0]);

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
	console.log(salary[1]);

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
	console.log(salary[2]);
	
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
	pm.test("test salary param 0", function () {
    	pm.expect(salary[0]).to.eql(salaryFromRequest);
	});
	
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
	pm.test("test salary param 1", function () {
    	pm.expect(salary[1]).to.eql((salaryFromRequest*2).toString());
	});

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
	let salary3Times = salaryFromRequest*3;
	pm.test("test salary param 2", function () {
    	pm.expect(salary[2]).to.eql(salary3Times.toString());
	});

15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
	for (var i = 0;i < salary.length; i++) {
  	console.log(salary[i]);
	};



http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
	var respData = pm.response.json();

7. Спарс request.
	  var reqData = request.data;

8. Проверить, что json response имеет параметр start_qa_salary
	pm.test("test respData has start_qa_salary property", function () {
    	pm.expect(respData.start_qa_salary).to.exist;
 	});

9. Проверить, что json response имеет параметр qa_salary_after_6_months
	pm.test("test respData has qa_salary_after_6_months property", function () {
    	pm.expect(respData.qa_salary_after_6_months).to.exist;
 	});

10. Проверить, что json response имеет параметр qa_salary_after_12_months
	pm.test("test respData has qa_salary_after_12_months property", function () {
    	pm.expect(respData.qa_salary_after_12_months).to.exist;
 	});

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
	pm.test("test respData has qa_salary_after_1.5_year property", function () {
    	pm.expect(respData['qa_salary_after_1.5_year']).to.exist;
 	}); //такое написание запроса (а не как в предыдущем) из-за применения точки после еденицы в обозначении полутора года. 

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
	pm.test("test respData has qa_salary_after_3.5_year property", function () {
    	pm.expect(respData['qa_salary_after_3.5_years']).to.exist;
 	});

13. Проверить, что json response имеет параметр person
	let person = respData.person;
	pm.test("test respData has person property", function () {
    	pm.expect(respData.person).to.exist;
 	});

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
	let req_salary = parseInt(reqData.salary)
	pm.test("start_qa_salary", function () {
	 pm.expect(respData.start_qa_salary).to.eql(req_salary);
	});

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
	pm.test("qa_salary_after_6_months", function () {
 	pm.expect(respData.qa_salary_after_6_months).to.eql(req_salary*2);
	});

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
	pm.test("qa_salary_after_12_months", function () {
 	pm.expect(respData.qa_salary_after_12_months).to.eql(req_salary*2.7);
	});

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
	pm.test("qa_salary_after_1.5_year", function () {
 	pm.expect(respData['qa_salary_after_1.5_year']).to.eql(req_salary*3.3);
	});

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
	pm.test("qa_salary_after_3.5_year", function () {
 	pm.expect(respData['qa_salary_after_3.5_years']).to.eql(req_salary*3.8);
	});

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
	pm.test("u_name_salary", function () {
 	pm.expect(respData.person.u_name[1]).to.eql(req_salary);
	});

20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
	let req_u_age = +reqData.age
	pm.test("u_age", function () {
  	pm.expect(respData.person.u_age).to.eql(req_u_age);
	});

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
	let salary = request.data.salary
	let u_salary_5_years = respData.person.u_salary_5_years
	pm.test("u_salary_5_years", function () {
	 pm.expect(u_salary_5_years).to.eql(salary*4.2);
	});

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
	for (var key in person) {
 	console.log(key + ' - ' + person[key]);
	}

		ИЛИ ВОТ ТАК МОЖНО (этот вариант более гибкий, в отличае от первого и 
				при внесении изменений они подтянуться автоматически)

	var arr =  ['u_age', 'u_name', 'u_salary_5_years'];
	for(var i=0;i<arr.length;i++){
    	console.log(arr[i] + ' - ' + person[arr[i]]);
	}
